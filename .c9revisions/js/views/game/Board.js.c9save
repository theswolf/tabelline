{"ts":1363091137991,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"define([\r\n  'jquery',\r\n  'underscore',\r\n  'backbone'\r\n  //'views/sidebar/SidebarView',\r\n  //'text!templates/game/progressBarTpl.html'\r\n], function($, _, Backbone){\r\n\r\n  var Board = Backbone.View.extend({\r\n    //el: $(\"#progressbar\"),\r\n\r\n//    events: {\r\n//      \"click #start\":\"startGame\"\r\n//    },\r\n\tstarted: false,\r\n\tstart: function() {\r\n\t\tApprouter.board.started = true;\r\n\t},\r\n\tstop: function() {\r\n\t\tApprouter.board.started = false;\r\n\t},\r\n\t\r\n    initialize: function() {\r\n      this.render();\r\n    },\r\n\r\n    render: function() {\r\n     // $( document ).on( \"mobileinit\",function() {\r\n      this.createGrid();\r\n\r\n    },\r\n    \r\n    createGrid: function() {\r\n    \tvar numCellInRow = Approuter.numCellInRow;\r\n    \tvar dim = Math.floor(this.$el.width() ); // - (this.$el.width()/(numCellInRow) )); \r\n        var cellDim =  Math.floor((dim)/(numCellInRow+1))-2;\r\n       // this.$el.css('margin-left','auto');\r\n       // this.$el.css('margin-right','auto');\r\n        var cellContainer = $('<div>');\r\n        cellContainer.css('margin-left','auto');\r\n        cellContainer.css('margin-right','auto');\r\n        cellContainer.css('width',dim );\r\n        cellContainer.css('text-align','center');\r\n    \t  for (var i = 0; i <= numCellInRow; i++) {\r\n              for (var p = 0; p <= numCellInRow; p++) {\r\n                //var cell = document.createElement('div');\r\n            \t  var id = i+'x'+p;\r\n            \t  var cell = $('<div id='+id+'>');\r\n            \t  \r\n            \t  cell.css('height',cellDim - (cellDim/4) );\r\n            \t  cell.css('width',cellDim );\r\n            \t  cell.css('position','relative');\r\n            \t  cell.css('zIndez',2); \r\n            \t  cell.css('border', '1px solid #F5FAFA');\r\n            \t  cell.css('font-size',cellDim/2);\r\n            \t  cell.css('padding-top',cellDim/4);\r\n            \t  if(i%2 == 0){\r\n            \t\t  cell.css('background-color','#C1DAD6');\r\n            \t  } \r\n            \t  else {\r\n            \t\t  cell.css('background-color','#ACD1E9');\r\n            \t  }\r\n            \t  \r\n            \t  if(p%2 == 0) {\r\n            \t\t cell.css('opacity','0.8');\r\n            \t  }\r\n            \t \r\n            \t  if(i == 0) {\r\n            \t\t  cell.append(p);\r\n            \t  }\r\n            \t  else if(p == 0) {\r\n            \t\t  if(i!= 0) {\r\n            \t\t\t  cell.append(i);\r\n            \t\t  } \r\n            \t  }\r\n            \t  else {\r\n            \t\t  cell.css('font-size',cellDim/3);\r\n            \t\t  cell.append(id);\r\n            \t  }\r\n            \t  cell.css('float','left'); \r\n            \t  var self = this;\r\n            \t  if(i!=0 && p!=0) {\r\n            \t\t  cell.mousedown(function() {\r\n                \t\t  self.clickedCell(this.id);\r\n                \t  });\r\n            \t  }\r\n            \t  \r\n            \t  cellContainer.append(cell);\r\n              }\r\n          }\r\n    \t  //cellContainer.css('padding-left',cellDim/2);\r\n    \t  this.$el.append(cellContainer);\r\n    },\r\n    \r\n    clickedCell: function(value) {\r\n    \tif (!this.started) return;\r\n    \tvar p= value.split('x')[0];\r\n    \tvar i= value.split('x')[1];\r\n    \tvar red = '#FF0000';\r\n    \tvar green = '#00FF00';\r\n    \tvar color = Approuter.lastQuestion == (p*i) ? green : red;\r\n    \tApprouter.lastResponse = value;\r\n    \tfor (var ii = 0; ii<=i; ii++) {\r\n    \t\t this.colorize('#'+p+'x'+ii,color);\r\n            \r\n          }\r\n    \tfor (var pp = 0; pp<p; pp++) { \r\n        \tthis.colorize('#'+pp+'x'+i,color);\r\n        }\r\n    \tthis.trigger('responseGiven');\r\n    },\r\n    \r\n    colorize: function(div,color) {\r\n    \tvar nativecolor = $(div).css('background-color');\r\n    \t $(div).css('background-color',color);\r\n    \t setTimeout(function() { $(div).css('background-color',nativecolor); },200);\r\n    }\r\n\r\n    \r\n\r\n  });\r\n  \r\n  return Board;\r\n  \r\n});\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3744}]],"length":3744}
